##################################################
#file datatypes.h
#pragma once
#include "Message.h"
#include "MessageData.h"
#include "Interfaces.h"
#include "Utility.h"
#include <string>

#for_each structure
//-------------------- structure.name type
public __gc class structure.name : public IEventData

   {
   public:
      #for_each structure.field
      #if (field.ctype = std::string)
      String* field.name;
      #else
      field.ctype field.name;
      #endif
      #endfor
		__delegate void EventHandler(structure.name* handler);
		EventHandler* handler;
      void pack(Message& message)
         {
         #for_each structure.field
         #if (field.ctype <> char*)
         ::pack(message, field.name);
         #endif
         #endfor
         }
      void unpack(Message& message)
         {
         #for_each structure.field
         #if (field.ctype <> char*)
         ::unpack(message, field.name);
         #endif
         #endfor
         }
      #if (structure.message <> T)
      const char* ddml()
         {
         return
structure.dotnetddml;
         }
	virtual void invokeEvent(Message& message)
		{
		handler(this);
		}

      #endif
   };
#endfor

#endfile

##################################################
#file ApsimEvents.h
#pragma once
#include "datatypes.h"
#include "ComponentInterface.h"
#include "utility.h"

public  __gc class ApsimEvents
	{
   private:
      IComms* comms;
	public:
      ApsimEvents(IComms* _comms) : comms(_comms) { }

#for_each event
      // -----------------
      // event.name
      // -----------------
		void registerevent.nameHandler(String* eventName, event.type::EventHandler* handler)
			{
			event.type* event = new event.type;
			event->handler = handler;
			comms->registerEventHandler(eventName, event);
			};
#endfor

   };
#endfile
   