#ifndef ScienceAPIH
#define ScienceAPIH
#include <general/platform.h>
#include <string>
#include <vector>
#include <boost/function.hpp>
#include <boost/bind.hpp>

struct QueryMatch
   {
   std::string name;
   std::string ddml;
   };

// ------------------------------------------------------------------
// Interface for interacting with simulation
// NB: Autogenerated. Do not modify manually.
// ------------------------------------------------------------------
class ScienceAPI
   {
   public:

      virtual void write(const std::string& msg) = 0;
      virtual std::string name() = 0;
      virtual std::string parent() = 0;

      // -----------------------------------------------------------------------
      // Return a list of all variables or components (fully qualified)
      // that match the specified pattern.
      // e.g. * will return a list of all components.
      //      wheat.* will return a list of all variables for the wheat module
      //      *.lai will return a list of all lai variables for all modules.
      // -----------------------------------------------------------------------
      virtual void query(const std::string& pattern, std::vector<QueryMatch>& matches) = 0;

      // null
      #define nullFunction(address) boost::function0<void>(boost::bind(address, this))
      virtual void subscribe(const std::string& name, boost::function0<void> handler) = 0;
      virtual void publish(const std::string& name) = 0;

      // bool
      #define BooleanFunction(address) boost::function1<void, bool& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, bool& data) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, bool& data) = 0;
      virtual void set(const std::string& name, const std::string& units, bool& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, bool& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, bool&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, bool&> getter,
                                  boost::function1<void, bool&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, bool&> handler) = 0;
      virtual void publish(const std::string& name, bool& data) = 0;

      // int
      #define IntFunction(address) boost::function1<void, int& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, int& data, int lower, int upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, int& data, int lower, int upper) = 0;
      virtual void set(const std::string& name, const std::string& units, int& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, int& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, int&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, int&> getter,
                                  boost::function1<void, int&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, int&> handler) = 0;
      virtual void publish(const std::string& name, int& data) = 0;

      // float
      #define FloatFunction(address) boost::function1<void, float& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, float& data, float lower, float upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, float& data, float lower, float upper) = 0;
      virtual void set(const std::string& name, const std::string& units, float& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, float& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, float&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, float&> getter,
                                  boost::function1<void, float&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, float&> handler) = 0;
      virtual void publish(const std::string& name, float& data) = 0;

      // double
      #define DoubleFunction(address) boost::function1<void, double& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, double& data, double lower, double upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, double& data, double lower, double upper) = 0;
      virtual void set(const std::string& name, const std::string& units, double& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, double& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, double&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, double&> getter,
                                  boost::function1<void, double&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, double&> handler) = 0;
      virtual void publish(const std::string& name, double& data) = 0;

      // std::string
      #define StringFunction(address) boost::function1<void, std::string& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::string& data) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::string& data) = 0;
      virtual void set(const std::string& name, const std::string& units, std::string& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::string& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::string&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::string&> getter,
                                  boost::function1<void, std::string&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::string&> handler) = 0;
      virtual void publish(const std::string& name, std::string& data) = 0;

      // std::vector<bool>
      #define BoolArrayFunction(address) boost::function1<void, std::vector<bool>& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<bool>& data) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<bool>& data) = 0;
      virtual void set(const std::string& name, const std::string& units, std::vector<bool>& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<bool>& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<bool>&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<bool>&> getter,
                                  boost::function1<void, std::vector<bool>&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<bool>&> handler) = 0;
      virtual void publish(const std::string& name, std::vector<bool>& data) = 0;

      // std::vector<int>
      #define IntArrayFunction(address) boost::function1<void, std::vector<int>& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<int>& data, int lower, int upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<int>& data, int lower, int upper) = 0;
      virtual void set(const std::string& name, const std::string& units, std::vector<int>& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<int>& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<int>&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<int>&> getter,
                                  boost::function1<void, std::vector<int>&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<int>&> handler) = 0;
      virtual void publish(const std::string& name, std::vector<int>& data) = 0;

      // std::vector<float>
      #define FloatArrayFunction(address) boost::function1<void, std::vector<float>& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<float>& data, float lower, float upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<float>& data, float lower, float upper) = 0;
      virtual void set(const std::string& name, const std::string& units, std::vector<float>& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<float>& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<float>&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<float>&> getter,
                                  boost::function1<void, std::vector<float>&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<float>&> handler) = 0;
      virtual void publish(const std::string& name, std::vector<float>& data) = 0;

      // std::vector<double>
      #define DoubleArrayFunction(address) boost::function1<void, std::vector<double>& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<double>& data, double lower, double upper) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<double>& data, double lower, double upper) = 0;
      virtual void set(const std::string& name, const std::string& units, std::vector<double>& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<double>& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<double>&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<double>&> getter,
                                  boost::function1<void, std::vector<double>&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<double>&> handler) = 0;
      virtual void publish(const std::string& name, std::vector<double>& data) = 0;

      // std::vector<std::string>
      #define StringArrayFunction(address) boost::function1<void, std::vector<std::string>& >(boost::bind(address, this, _1))
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<std::string>& data) = 0;
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<std::string>& data) = 0;
      virtual void set(const std::string& name, const std::string& units, std::vector<std::string>& data) = 0;
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<std::string>& variable) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<std::string>&> fn) = 0;
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<std::string>&> getter,
                                  boost::function1<void, std::vector<std::string>&> setter) = 0;
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<std::string>&> handler) = 0;
      virtual void publish(const std::string& name, std::vector<std::string>& data) = 0;

   };
#endif
