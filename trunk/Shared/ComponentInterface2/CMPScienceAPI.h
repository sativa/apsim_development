#ifndef CMPScienceAPIH
#define CMPScienceAPIH
#include <ComponentInterface2/ScienceAPI.h>
#include <general/platform.h>
class CMPComponentInterface;

// ------------------------------------------------------------------
// CMP Implementation for interacting with simulation
// NB: Autogenerated. Do not modify manually.
// ------------------------------------------------------------------
class EXPORT CMPScienceAPI : public ScienceAPI
   {
   public:
      CMPScienceAPI(CMPComponentInterface& componentinterface);

      virtual void write(const std::string& msg);
      virtual std::string name();
      virtual std::string parent();

      virtual void query(const std::string& pattern, std::vector<QueryMatch>& matches);

      // null
      virtual void subscribe(const std::string& name, boost::function0<void> handler);
      virtual void publish(const std::string& name);

      // bool
      virtual bool read(const std::string& name, const std::string& units, bool optional, bool& data);
      virtual bool get(const std::string& name, const std::string& units, bool optional, bool& data);
      virtual void set(const std::string& name, const std::string& units, bool& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, bool& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, bool&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, bool&> getter,
                                  boost::function1<void, bool&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, bool&> handler);
      virtual void publish(const std::string& name, bool& data);

      // int
      virtual bool read(const std::string& name, const std::string& units, bool optional, int& data, int lower, int upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, int& data, int lower, int upper);
      virtual void set(const std::string& name, const std::string& units, int& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, int& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, int&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, int&> getter,
                                  boost::function1<void, int&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, int&> handler);
      virtual void publish(const std::string& name, int& data);

      // float
      virtual bool read(const std::string& name, const std::string& units, bool optional, float& data, float lower, float upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, float& data, float lower, float upper);
      virtual void set(const std::string& name, const std::string& units, float& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, float& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, float&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, float&> getter,
                                  boost::function1<void, float&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, float&> handler);
      virtual void publish(const std::string& name, float& data);

      // double
      virtual bool read(const std::string& name, const std::string& units, bool optional, double& data, double lower, double upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, double& data, double lower, double upper);
      virtual void set(const std::string& name, const std::string& units, double& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, double& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, double&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, double&> getter,
                                  boost::function1<void, double&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, double&> handler);
      virtual void publish(const std::string& name, double& data);

      // std::string
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::string& data);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::string& data);
      virtual void set(const std::string& name, const std::string& units, std::string& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::string& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::string&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::string&> getter,
                                  boost::function1<void, std::string&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::string&> handler);
      virtual void publish(const std::string& name, std::string& data);

      // std::vector<bool>
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<bool>& data);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<bool>& data);
      virtual void set(const std::string& name, const std::string& units, std::vector<bool>& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<bool>& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<bool>&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::vector<bool>&> getter,
                                  boost::function1<void, std::vector<bool>&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<bool>&> handler);
      virtual void publish(const std::string& name, std::vector<bool>& data);

      // std::vector<int>
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<int>& data, int lower, int upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<int>& data, int lower, int upper);
      virtual void set(const std::string& name, const std::string& units, std::vector<int>& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<int>& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<int>&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::vector<int>&> getter,
                                  boost::function1<void, std::vector<int>&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<int>&> handler);
      virtual void publish(const std::string& name, std::vector<int>& data);

      // std::vector<float>
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<float>& data, float lower, float upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<float>& data, float lower, float upper);
      virtual void set(const std::string& name, const std::string& units, std::vector<float>& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<float>& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<float>&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::vector<float>&> getter,
                                  boost::function1<void, std::vector<float>&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<float>&> handler);
      virtual void publish(const std::string& name, std::vector<float>& data);

      // std::vector<double>
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<double>& data, double lower, double upper);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<double>& data, double lower, double upper);
      virtual void set(const std::string& name, const std::string& units, std::vector<double>& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<double>& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<double>&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::vector<double>&> getter,
                                  boost::function1<void, std::vector<double>&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<double>&> handler);
      virtual void publish(const std::string& name, std::vector<double>& data);

      // std::vector<std::string>
      virtual bool read(const std::string& name, const std::string& units, bool optional, std::vector<std::string>& data);
      virtual bool get(const std::string& name, const std::string& units, bool optional, std::vector<std::string>& data);
      virtual void set(const std::string& name, const std::string& units, std::vector<std::string>& data);
      virtual void expose(const std::string& name, const std::string& units, const std::string& description, bool writable, std::vector<std::string>& variable);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description, boost::function1<void, std::vector<std::string>&> method);
      virtual void exposeFunction(const std::string& name, const std::string& units, const std::string& description,
                                  boost::function1<void, std::vector<std::string>&> getter,
                                  boost::function1<void, std::vector<std::string>&> setter);
      virtual void subscribe(const std::string& name, boost::function1<void, std::vector<std::string>&> handler);
      virtual void publish(const std::string& name, std::vector<std::string>& data);


   private:
      CMPComponentInterface& componentInterface;
   };
#endif
