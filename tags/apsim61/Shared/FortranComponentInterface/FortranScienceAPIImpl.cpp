//---------------------------------------------
// Interface for FORTRAN modules.
// Autogenerated - do not modify manually
//---------------------------------------------
#include "FortranWrapper.h"
#include <ComponentInterface2/ScienceAPI.h>
using namespace std;

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetBoolean
   (const char* Name, const char* Units, int& Optional,
    bool& Value,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadBoolean
   (const char* Name, const char* Units, int& Optional,
    bool& Value,

    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetInt
   (const char* Name, const char* Units, int& Optional,
    int& Value,
    int Lower, int Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadInt
   (const char* Name, const char* Units, int& Optional,
    int& Value,
    int Lower, int Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetFloat
   (const char* Name, const char* Units, int& Optional,
    float& Value,
    float Lower, float Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadFloat
   (const char* Name, const char* Units, int& Optional,
    float& Value,
    float Lower, float Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetDouble
   (const char* Name, const char* Units, int& Optional,
    double& Value,
    double Lower, double Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadDouble
   (const char* Name, const char* Units, int& Optional,
    double& Value,
    double Lower, double Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetString
   (const char* Name, const char* Units, int& Optional,
    char* FortranValue,
    unsigned NameLength, unsigned UnitsLength, unsigned ValueLength)
   {
   std::string Value;
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value);
   if (ok)
      {
      ToFortran(Value, FortranValue, ValueLength);
      ok = true;
      }
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadString
   (const char* Name, const char* Units, int& Optional,
    char* FortranValue,

    unsigned NameLength, unsigned UnitsLength, unsigned ValueLength)
   {
   std::string Value;
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value);
   if (ok)
      {
      ToFortran(Value, FortranValue, ValueLength);
      ok = true;
      }
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetBoolArray
   (const char* Name, const char* Units, int& Optional,
    bool& Value,
    int& ArraySize, int& NumValues,        unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadBoolArray
   (const char* Name, const char* Units, int& Optional,
    bool& Value,
    int& ArraySize, int& NumValues,    
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetIntArray
   (const char* Name, const char* Units, int& Optional,
    int& Value,
    int& ArraySize, int& NumValues,        int Lower, int Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadIntArray
   (const char* Name, const char* Units, int& Optional,
    int& Value,
    int& ArraySize, int& NumValues,        int Lower, int Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetFloatArray
   (const char* Name, const char* Units, int& Optional,
    float& Value,
    int& ArraySize, int& NumValues,        float Lower, float Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadFloatArray
   (const char* Name, const char* Units, int& Optional,
    float& Value,
    int& ArraySize, int& NumValues,        float Lower, float Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetDoubleArray
   (const char* Name, const char* Units, int& Optional,
    double& Value,
    int& ArraySize, int& NumValues,        double Lower, double Upper,    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadDoubleArray
   (const char* Name, const char* Units, int& Optional,
    double& Value,
    int& ArraySize, int& NumValues,        double Lower, double Upper,
    unsigned NameLength, unsigned UnitsLength)
   {
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value, Lower, Upper);
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL GetStringArray
   (const char* Name, const char* Units, int& Optional,
    char* FortranValue,
    int& ArraySize, int& NumValues,        unsigned NameLength, unsigned UnitsLength, unsigned ValueLength)
   {
   std::vector<std::string> Value;
   bool ok = FortranWrapper::currentInstance->scienceAPI->get(string(Name, NameLength), string(Units, UnitsLength),
                                                              Optional, Value);
   if (ok)
      {
      ToFortran(Value, FortranValue, ValueLength, ArraySize, NumValues);
      ok = true;
      }
   return ok;
   }

// -------------------------------------------------------------------------------------------------
extern "C" bool EXPORT STDCALL ReadStringArray
   (const char* Name, const char* Units, int& Optional,
    char* FortranValue,
    int& ArraySize, int& NumValues,    
    unsigned NameLength, unsigned UnitsLength, unsigned ValueLength)
   {
   std::vector<std::string> Value;
   bool ok = FortranWrapper::currentInstance->scienceAPI->read(string(Name, NameLength), string(Units, UnitsLength),
                                                               Optional, Value);
   if (ok)
      {
      ToFortran(Value, FortranValue, ValueLength, ArraySize, NumValues);
      ok = true;
      }
   return ok;
   }


